
CREATE DATABASE PETSTORE_DATABASE;

USE PETSTORE_DATABASE;

---------------------------------------------------------------------------------------------
CREATING & POPULATING THE DEPARTMENT TABLE [1 OUT OF 12] 
---------------------------------------------------------------------------------------------

DROP TABLE DEPARTMENTS; /* If table already exists */

CREATE TABLE DEPARTMENTS(
DEPT_NO int,
DEPT_NAME varchar(255) NOT NULL,
PRIMARY KEY (DEPT_NO)
);

DESCRIBE DEPARTMENTS;

CREATE SEQUENCE DEPT_SEQ
MINVALUE 1
START WITH 1
INCREMENT BY 1
CACHE 10;

BEGIN
INSERT INTO DEPARTMENTS (DEPT_NO, DEPT_NAME) VALUES (DEPT_SEQ.NEXTVAL, 'Woof Bark Centre');
INSERT INTO DEPARTMENTS (DEPT_NO, DEPT_NAME) VALUES (DEPT_SEQ.NEXTVAL, 'Meow Play Centre');
INSERT INTO DEPARTMENTS (DEPT_NO, DEPT_NAME) VALUES (DEPT_SEQ.NEXTVAL, 'Aqua Aquarium');
INSERT INTO DEPARTMENTS (DEPT_NO, DEPT_NAME) VALUES (DEPT_SEQ.NEXTVAL, 'Reptile Refuge');
INSERT INTO DEPARTMENTS (DEPT_NO, DEPT_NAME) VALUES (DEPT_SEQ.NEXTVAL, 'Pet Guru Centre');
INSERT INTO DEPARTMENTS (DEPT_NO, DEPT_NAME) VALUES (DEPT_SEQ.NEXTVAL, 'Administration');
INSERT INTO DEPARTMENTS (DEPT_NO, DEPT_NAME) VALUES (DEPT_SEQ.NEXTVAL, 'Finance');
INSERT INTO DEPARTMENTS (DEPT_NO, DEPT_NAME) VALUES (DEPT_SEQ.NEXTVAL, 'Human Resources');
INSERT INTO DEPARTMENTS (DEPT_NO, DEPT_NAME) VALUES (DEPT_SEQ.NEXTVAL, 'Customer Service Desk');
INSERT INTO DEPARTMENTS (DEPT_NO, DEPT_NAME) VALUES (DEPT_SEQ.NEXTVAL, 'Stock Room');
END;
/

SELECT * FROM DEPARTMENTS;

---------------------------------------------------------------------------------------------
CREATING & POPULATING THE EMPLOYEE ROLE TABLE [2 OUT OF 12] 
---------------------------------------------------------------------------------------------

CREATE TABLE EMPLOYEE_ROLE(
EMPLOYEE_ROLE_ID int,
JOB_TITLE varchar(255) NOT NULL,
JOB_SALARY DECIMAL (7,2) NOT NULL,
JOB_DESCRIPTION varchar (255) NOT NULL,
PRIMARY KEY (EMPLOYEE_ROLE_ID)
);

DESCRIBE ORDER;

CREATE SEQUENCE CUST_ER
MINVALUE 1
START WITH 1
INCREMENT BY 1
CACHE 10;

BEGIN
INSERT INTO EMPLOYEE_ROLE (EMPLOYEE_ROLE_ID, JOB_TITLE, JOB_SALARY, JOB_DESCRIPTION) VALUES (CUST_ER.NEXTVAL,'Store Manager', 90000 ,'The store manager is the person ultimately responsible for the day-to-day operations of the pet store.');
INSERT INTO EMPLOYEE_ROLE (EMPLOYEE_ROLE_ID, JOB_TITLE, JOB_SALARY, JOB_DESCRIPTION) VALUES (CUST_ER.NEXTVAL,'Assistant_Manager', 50000 ,'The assistant store manager ensures store personnel is providing exceptional customer service.');
INSERT INTO EMPLOYEE_ROLE (EMPLOYEE_ROLE_ID, JOB_TITLE, JOB_SALARY, JOB_DESCRIPTION) VALUES (CUST_ER.NEXTVAL,'Pet_Guru', 40000 ,'Responsible for finding the right pet for the right customer!');
INSERT INTO EMPLOYEE_ROLE (EMPLOYEE_ROLE_ID, JOB_TITLE, JOB_SALARY, JOB_DESCRIPTION) VALUES (CUST_ER.NEXTVAL,'Executive_Sales_Assistant', 35000 ,'An elite sales assistant equipt with expert knowledge in animal products/supplies & pets.');
INSERT INTO EMPLOYEE_ROLE (EMPLOYEE_ROLE_ID, JOB_TITLE, JOB_SALARY, JOB_DESCRIPTION) VALUES (CUST_ER.NEXTVAL,'Senior_Sales_Assistant', 30000 ,'A senior member of staff who serves customers in a shop.');
INSERT INTO EMPLOYEE_ROLE (EMPLOYEE_ROLE_ID, JOB_TITLE, JOB_SALARY, JOB_DESCRIPTION) VALUES (CUST_ER.NEXTVAL,'Junior_Sales_Assistant', 20000 ,'A junior member of staff who serves customers in a shop.');
INSERT INTO EMPLOYEE_ROLE (EMPLOYEE_ROLE_ID, JOB_TITLE, JOB_SALARY, JOB_DESCRIPTION) VALUES (CUST_ER.NEXTVAL,'Security Guard', 25000 ,'Responsible for protecting products, supplies and animals from being stolen');
INSERT INTO EMPLOYEE_ROLE (EMPLOYEE_ROLE_ID, JOB_TITLE, JOB_SALARY, JOB_DESCRIPTION) VALUES (CUST_ER.NEXTVAL,'Janitor', 25000 ,'Responsible for cleaning up and maintaing the store');
END;
/
---------------------------------------------------------------------------------------------
CREATING & POPULATING THE CUSTOMER TABLE [3 OUT OF 12]
---------------------------------------------------------------------------------------------

CREATE TABLE CUSTOMERS(
CUSTOMER_ID int,
CUST_FIRST_NAME varchar(255) NOT NULL,
CUST_LAST_NAME varchar(255) NOT NULL,
CUST_STREET_ADDRESS varchar(255) NULL,
CUST_TOWN varchar(255) NULL,
CUST_COUNTY varchar(255) NULL,
CUST_PHONE INT NULL,
CUST_EMAIL varchar(255) NULL,
PRIMARY KEY (CUSTOMER_ID)
);

DESCRIBE CUSTOMERS;

CREATE SEQUENCE CUST_SEQ
MINVALUE 1
START WITH 501
INCREMENT BY 1
CACHE 10;

BEGIN
INSERT INTO CUSTOMERS (CUSTOMER_ID,CUST_FIRST_NAME,CUST_LAST_NAME,CUST_STREET_ADDRESS,CUST_TOWN,CUST_COUNTY,CUST_PHONE,CUST_EMAIL) VALUES (CUST_SEQ.NEXTVAL,'Andrei','Almasanu','50 Beech Avenue','Donnybrook','Dublin',0874345565,'andrei.almasanu@google.com');
INSERT INTO CUSTOMERS (CUSTOMER_ID,CUST_FIRST_NAME,CUST_LAST_NAME,CUST_STREET_ADDRESS,CUST_TOWN,CUST_COUNTY,CUST_PHONE,CUST_EMAIL) VALUES (CUST_SEQ.NEXTVAL,'Gabriella','Bacelli','7 Dolphins Way','Letterkenny','Donegal',0839789444,'garbriella@yahoo.ie');
INSERT INTO CUSTOMERS (CUSTOMER_ID,CUST_FIRST_NAME,CUST_LAST_NAME,CUST_STREET_ADDRESS,CUST_TOWN,CUST_COUNTY,CUST_PHONE,CUST_EMAIL) VALUES (CUST_SEQ.NEXTVAL,'Aongus','Bates','24 Merrion Street','Roundwood','Wicklow',0861789927,'aongus.bates@hp.com');
INSERT INTO CUSTOMERS (CUSTOMER_ID,CUST_FIRST_NAME,CUST_LAST_NAME,CUST_STREET_ADDRESS,CUST_TOWN,CUST_COUNTY,CUST_PHONE,CUST_EMAIL) VALUES (CUST_SEQ.NEXTVAL,'Laura','Duggan','3 Windy Avenue','Ranelagh','Dublin',0871322924,'ldug@gmail.com');
INSERT INTO CUSTOMERS (CUSTOMER_ID,CUST_FIRST_NAME,CUST_LAST_NAME,CUST_STREET_ADDRESS,CUST_TOWN,CUST_COUNTY,CUST_PHONE,CUST_EMAIL) VALUES (CUST_SEQ.NEXTVAL,'Ciara','Byrne','10 Stillorgan Road','Stillorgan','Dublin',0852342233,'ciara.byrne@microsoft.ie');
INSERT INTO CUSTOMERS (CUSTOMER_ID,CUST_FIRST_NAME,CUST_LAST_NAME,CUST_STREET_ADDRESS,CUST_TOWN,CUST_COUNTY,CUST_PHONE,CUST_EMAIL) VALUES (CUST_SEQ.NEXTVAL,'David','Clarke','5 Bishop Street','Dundrum','Dublin',0853337777,'wishmyfirstnamewaskent@gmail.com');
INSERT INTO CUSTOMERS (CUSTOMER_ID,CUST_FIRST_NAME,CUST_LAST_NAME,CUST_STREET_ADDRESS,CUST_TOWN,CUST_COUNTY,CUST_PHONE,CUST_EMAIL) VALUES (CUST_SEQ.NEXTVAL,'John','Dunnion','1 Crystal Rock','Blackrock','Louth',0891559933,'computerscience4life@ucd.ie');
INSERT INTO CUSTOMERS (CUSTOMER_ID,CUST_FIRST_NAME,CUST_LAST_NAME,CUST_STREET_ADDRESS,CUST_TOWN,CUST_COUNTY,CUST_PHONE,CUST_EMAIL) VALUES (CUST_SEQ.NEXTVAL,'Mike','Flynn','78 Lion Park','Churchtown','Dublin',0861683324,'bigmike@hotmail.com');
INSERT INTO CUSTOMERS (CUSTOMER_ID,CUST_FIRST_NAME,CUST_LAST_NAME,CUST_STREET_ADDRESS,CUST_TOWN,CUST_COUNTY,CUST_PHONE,CUST_EMAIL) VALUES (CUST_SEQ.NEXTVAL,'Sharon','McHugh','3 Oak Street','Terenure','Dublin',0833332924,'mchughmchugh@gmail.com');
INSERT INTO CUSTOMERS (CUSTOMER_ID,CUST_FIRST_NAME,CUST_LAST_NAME,CUST_STREET_ADDRESS,CUST_TOWN,CUST_COUNTY,CUST_PHONE,CUST_EMAIL) VALUES (CUST_SEQ.NEXTVAL,'Colm','Glennon','33 Molesworth Street','Wexford Town','Wexford',0831489524,'colmglennon@gmail.com');
INSERT INTO CUSTOMERS (CUSTOMER_ID,CUST_FIRST_NAME,CUST_LAST_NAME,CUST_STREET_ADDRESS,CUST_TOWN,CUST_COUNTY,CUST_PHONE,CUST_EMAIL) VALUES (CUST_SEQ.NEXTVAL,'Desmond','Haines','4 Sunset Boulevard','Salthill','Galway',0877789924,'dhaines@hotmail.com');
INSERT INTO CUSTOMERS (CUSTOMER_ID,CUST_FIRST_NAME,CUST_LAST_NAME,CUST_STREET_ADDRESS,CUST_TOWN,CUST_COUNTY,CUST_PHONE,CUST_EMAIL) VALUES (CUST_SEQ.NEXTVAL,'Brian','Hassett','27 Cedar Road','Cork City','Cork',0851349924,'thebrianexperience@gmail.com');
END;
/

SELECT * FROM CUSTOMERS;

---------------------------------------------------------------------------------------------
CREATING & POPULATING THE PRODUCTS TABLE [4 OUT OF 12] 
---------------------------------------------------------------------------------------------

CREATE TABLE PRODUCTS(
PRODUCT_ID int,
PRODUCT_CATEGORY varchar(255) NOT NULL,
PRODUCT_BRAND varchar(255) NOT NULL,
PRIMARY KEY (PRODUCT_ID)
);

DESCRIBE PRODUCTS;

CREATE SEQUENCE CUST_PRO
MINVALUE 1
START WITH 101
INCREMENT BY 1
CACHE 10;

BEGIN
INSERT INTO PRODUCTS (PRODUCT_ID,PRODUCT_CATEGORY,PRODUCT_BRAND) VALUES (CUST_PRO.NEXTVAL,'Toy','Almasanu');
INSERT INTO PRODUCTS (PRODUCT_ID,PRODUCT_CATEGORY,PRODUCT_BRAND) VALUES (CUST_PRO.NEXTVAL,'Collars','Coleman');
INSERT INTO PRODUCTS (PRODUCT_ID,PRODUCT_CATEGORY,PRODUCT_BRAND) VALUES (CUST_PRO.NEXTVAL,'Bowls','Bowen');
INSERT INTO PRODUCTS (PRODUCT_ID,PRODUCT_CATEGORY,PRODUCT_BRAND) VALUES (CUST_PRO.NEXTVAL,'Id Tags','Casey');
INSERT INTO PRODUCTS (PRODUCT_ID,PRODUCT_CATEGORY,PRODUCT_BRAND) VALUES (CUST_PRO.NEXTVAL,'Health','Walsh');
INSERT INTO PRODUCTS (PRODUCT_ID,PRODUCT_CATEGORY,PRODUCT_BRAND) VALUES (CUST_PRO.NEXTVAL,'Grooming','Wong');
INSERT INTO PRODUCTS (PRODUCT_ID,PRODUCT_CATEGORY,PRODUCT_BRAND) VALUES (CUST_PRO.NEXTVAL,'Beds','Knowles');
INSERT INTO PRODUCTS (PRODUCT_ID,PRODUCT_CATEGORY,PRODUCT_BRAND) VALUES (CUST_PRO.NEXTVAL,'Furniture','Walsh');
INSERT INTO PRODUCTS (PRODUCT_ID,PRODUCT_CATEGORY,PRODUCT_BRAND) VALUES (CUST_PRO.NEXTVAL,'Carriers','Harkness');
INSERT INTO PRODUCTS (PRODUCT_ID,PRODUCT_CATEGORY,PRODUCT_BRAND) VALUES (CUST_PRO.NEXTVAL,'Electronics','Byrne');
END;
/

SELECT * FROM PRODUCTS;

---------------------------------------------------------------------------------------------
CREATING & POPULATING THE SUPPLIES TABLE [5 OUT OF 12] 
---------------------------------------------------------------------------------------------

CREATE TABLE SUPPLIES(
SUPPLY_ID int,
SUPPLY_CATEGORY varchar(255) NOT NULL,
SUPPLY_BRAND varchar(255) NOT NULL,
EXPIRY_DATE date NOT NULL,
PRIMARY KEY (SUPPLY_ID)
);

DESCRIBE SUPPLIES;

CREATE SEQUENCE CUST_SUPPLY
MINVALUE 1
START WITH 201
INCREMENT BY 1
CACHE 10;

BEGIN
INSERT INTO SUPPLIES (SUPPLY_ID,SUPPLY_CATEGORY,SUPPLY_BRAND,EXPIRY_DATE) VALUES (CUST_SUPPLY.NEXTVAL,'Cat Dry Food','Wong','12/11/2017');
INSERT INTO SUPPLIES (SUPPLY_ID,SUPPLY_CATEGORY,SUPPLY_BRAND,EXPIRY_DATE) VALUES (CUST_SUPPLY.NEXTVAL,'Cat Wet Food','Wong','12/12/2015');
INSERT INTO SUPPLIES (SUPPLY_ID,SUPPLY_CATEGORY,SUPPLY_BRAND,EXPIRY_DATE) VALUES (CUST_SUPPLY.NEXTVAL,'Cat Snacks','Wong','12/12/2014');
INSERT INTO SUPPLIES (SUPPLY_ID,SUPPLY_CATEGORY,SUPPLY_BRAND,EXPIRY_DATE) VALUES (CUST_SUPPLY.NEXTVAL,'Kitty Litter','Power','12/11/2015');
INSERT INTO SUPPLIES (SUPPLY_ID,SUPPLY_CATEGORY,SUPPLY_BRAND,EXPIRY_DATE) VALUES (CUST_SUPPLY.NEXTVAL,'Dog Dry Food','Niclot','12/10/2017');
INSERT INTO SUPPLIES (SUPPLY_ID,SUPPLY_CATEGORY,SUPPLY_BRAND,EXPIRY_DATE) VALUES (CUST_SUPPLY.NEXTVAL,'Dog Wet Food','Niclot','12/11/2015');
INSERT INTO SUPPLIES (SUPPLY_ID,SUPPLY_CATEGORY,SUPPLY_BRAND,EXPIRY_DATE) VALUES (CUST_SUPPLY.NEXTVAL,'Dog Snacks','Niclot','12/12/2014');
INSERT INTO SUPPLIES (SUPPLY_ID,SUPPLY_CATEGORY,SUPPLY_BRAND,EXPIRY_DATE) VALUES (CUST_SUPPLY.NEXTVAL,'Fish Pellets','Shanahan','12/12/2018');
INSERT INTO SUPPLIES (SUPPLY_ID,SUPPLY_CATEGORY,SUPPLY_BRAND,EXPIRY_DATE) VALUES (CUST_SUPPLY.NEXTVAL,'Hemp Oil Feed','Tsang','12/11/2019');
INSERT INTO SUPPLIES (SUPPLY_ID,SUPPLY_CATEGORY,SUPPLY_BRAND,EXPIRY_DATE) VALUES (CUST_SUPPLY.NEXTVAL,'Hamster Dry Food','Wright','12/08/2018');
END;
/

SELECT * FROM SUPPLIES;

---------------------------------------------------------------------------------------------
CREATING & POPULATING THE ANIMAL BREEDERS TABLE [6 OUT OF 12] 
---------------------------------------------------------------------------------------------
CREATE TABLE ANIMAL_BREEDERS(
BREEDER_ID int,
COMPANY varchar(255) NOT NULL,
COUNTRY varchar(255) NOT NULL,
PRIMARY KEY (BREEDER_ID)
);

DESCRIBE ANIMAL_BREEDERS;

CREATE SEQUENCE CUST_BREEDERS
MINVALUE 1
START WITH 401
INCREMENT BY 1
CACHE 10;

BEGIN
INSERT INTO ANIMAL_BREEDERS (BREEDER_ID,COMPANY,COUNTRY) VALUES (CUST_BREEDERS.NEXTVAL,'Mc Inerney','England');
INSERT INTO ANIMAL_BREEDERS (BREEDER_ID,COMPANY,COUNTRY) VALUES (CUST_BREEDERS.NEXTVAL,'Maher','England');
INSERT INTO ANIMAL_BREEDERS (BREEDER_ID,COMPANY,COUNTRY) VALUES (CUST_BREEDERS.NEXTVAL,'O Connor','England');
INSERT INTO ANIMAL_BREEDERS (BREEDER_ID,COMPANY,COUNTRY) VALUES (CUST_BREEDERS.NEXTVAL,'Lyons','France');
INSERT INTO ANIMAL_BREEDERS (BREEDER_ID,COMPANY,COUNTRY) VALUES (CUST_BREEDERS.NEXTVAL,'Kent','France');
INSERT INTO ANIMAL_BREEDERS (BREEDER_ID,COMPANY,COUNTRY) VALUES (CUST_BREEDERS.NEXTVAL,'Mc Cann','France');
INSERT INTO ANIMAL_BREEDERS (BREEDER_ID,COMPANY,COUNTRY) VALUES (CUST_BREEDERS.NEXTVAL,'Mc Allister','Germany');
INSERT INTO ANIMAL_BREEDERS (BREEDER_ID,COMPANY,COUNTRY) VALUES (CUST_BREEDERS.NEXTVAL,'Sheridan','Germany');
INSERT INTO ANIMAL_BREEDERS (BREEDER_ID,COMPANY,COUNTRY) VALUES (CUST_BREEDERS.NEXTVAL,'White','Germany');
INSERT INTO ANIMAL_BREEDERS (BREEDER_ID,COMPANY,COUNTRY) VALUES (CUST_BREEDERS.NEXTVAL,'Zhereshschin','Russia');
END;
/

SELECT * FROM ANIMAL_BREEDERS;

---------------------------------------------------------------------------------------------
CREATING & POPULATING THE PETS TABLE [7 OUT OF 12] 
---------------------------------------------------------------------------------------------

CREATE TABLE PETS(
PET_ID int,
BIRTH_DATE date NOT NULL,
SPECIES varchar(7) NOT NULL,
GENDER varchar(8) NOT NULL,
BREEDER_ID number(10) NOT NULL,
PRIMARY KEY (PET_ID),
FOREIGN KEY (BREEDER_ID) REFERENCES ANIMAL_BREEDERS(Breeder_ID)
);

DESCRIBE PETS;

CREATE SEQUENCE CUST_PETS
MINVALUE 1
START WITH 301
INCREMENT BY 1
CACHE 10;

BEGIN
INSERT INTO PETS (PET_ID,BIRTH_DATE,SPECIES,GENDER,BREEDER_ID) VALUES (CUST_PETS.NEXTVAL,'12/30/2013','Dog','Male','402');
INSERT INTO PETS (PET_ID,BIRTH_DATE,SPECIES,GENDER,BREEDER_ID) VALUES (CUST_PETS.NEXTVAL,'12/11/2013','Cat','Female','404');
INSERT INTO PETS (PET_ID,BIRTH_DATE,SPECIES,GENDER,BREEDER_ID) VALUES (CUST_PETS.NEXTVAL,'12/13/2013','Cat','Female','404');
INSERT INTO PETS (PET_ID,BIRTH_DATE,SPECIES,GENDER,BREEDER_ID) VALUES (CUST_PETS.NEXTVAL,'12/13/2013','Snake','Female','403');
INSERT INTO PETS (PET_ID,BIRTH_DATE,SPECIES,GENDER,BREEDER_ID) VALUES (CUST_PETS.NEXTVAL,'01/12/2013','Dog','Male','402');
INSERT INTO PETS (PET_ID,BIRTH_DATE,SPECIES,GENDER,BREEDER_ID) VALUES (CUST_PETS.NEXTVAL,'12/25/2013','Dog','Female','401');
INSERT INTO PETS (PET_ID,BIRTH_DATE,SPECIES,GENDER,BREEDER_ID) VALUES (CUST_PETS.NEXTVAL,'12/05/2013','Dog','Female','405');
INSERT INTO PETS (PET_ID,BIRTH_DATE,SPECIES,GENDER,BREEDER_ID) VALUES (CUST_PETS.NEXTVAL,'11/11/2013','Dog','Male','405');
INSERT INTO PETS (PET_ID,BIRTH_DATE,SPECIES,GENDER,BREEDER_ID) VALUES (CUST_PETS.NEXTVAL,'12/08/2013','Dog','Female','401');
INSERT INTO PETS (PET_ID,BIRTH_DATE,SPECIES,GENDER,BREEDER_ID) VALUES (CUST_PETS.NEXTVAL,'12/05/2013','Cat','Male','409');
INSERT INTO PETS (PET_ID,BIRTH_DATE,SPECIES,GENDER,BREEDER_ID) VALUES (CUST_PETS.NEXTVAL,'10/15/2013','Parrot','Female','410');
INSERT INTO PETS (PET_ID,BIRTH_DATE,SPECIES,GENDER,BREEDER_ID) VALUES (CUST_PETS.NEXTVAL,'10/15/2013','Parrot','Male','410');
INSERT INTO PETS (PET_ID,BIRTH_DATE,SPECIES,GENDER,BREEDER_ID) VALUES (CUST_PETS.NEXTVAL,'11/14/2013','Parrot','Male','410');
INSERT INTO PETS (PET_ID,BIRTH_DATE,SPECIES,GENDER,BREEDER_ID) VALUES (CUST_PETS.NEXTVAL,'12/13/2013','Parrot','Male','407');
END;
/

SELECT * FROM PETS;

---------------------------------------------------------------------------------------------
CREATING & POPULATING THE TABLE [8 OUT OF 12] 
---------------------------------------------------------------------------------------------

CREATE TABLE EMPLOYEES(
EMPLOYEE_ID int,
EMP_FIRST_NAME varchar(255) NOT NULL,
EMP_LAST_NAME varchar(255) NOT NULL,
MANAGER_EMP_ID int NOT NULL,
HIRE_DATE date NOT NULL,
EMPLOYEE_ROLE_ID INT NOT NULL,
PRIMARY KEY (EMPLOYEE_ID),
FOREIGN KEY (EMPLOYEE_ROLE_ID) REFERENCES EMPLOYEE_ROLE(EMPLOYEE_ROLE_ID)
);

DESCRIBE EMPLOYEES;

CREATE SEQUENCE CUST_EMPLOY
MINVALUE 1
START WITH 601
INCREMENT BY 1
CACHE 10;

BEGIN
INSERT INTO EMPLOYEES (EMPLOYEE_ID, EMP_FIRST_NAME, EMP_LAST_NAME, MANAGER_EMP_ID, HIRE_DATE, EMPLOYEE_ROLE_ID) 
VALUES (CUST_EMPLOY.NEXTVAL,'Zachary','Campbell','601','01/01/2013', 1);
INSERT INTO EMPLOYEES (EMPLOYEE_ID, EMP_FIRST_NAME, EMP_LAST_NAME, MANAGER_EMP_ID, HIRE_DATE, EMPLOYEE_ROLE_ID) 
VALUES (CUST_EMPLOY.NEXTVAL,'Garrett','Colemen','601','05/06/2013', 3);
INSERT INTO EMPLOYEES (EMPLOYEE_ID, EMP_FIRST_NAME, EMP_LAST_NAME, MANAGER_EMP_ID, HIRE_DATE, EMPLOYEE_ROLE_ID) 
VALUES (CUST_EMPLOY.NEXTVAL,'Ronna','Fibikar','601','07/22/2013',2);
INSERT INTO EMPLOYEES (EMPLOYEE_ID, EMP_FIRST_NAME, EMP_LAST_NAME, MANAGER_EMP_ID, HIRE_DATE, EMPLOYEE_ROLE_ID) 
VALUES (CUST_EMPLOY.NEXTVAL,'Noreen','Lenihan','603','03/03/2014', 5);
INSERT INTO EMPLOYEES (EMPLOYEE_ID, EMP_FIRST_NAME, EMP_LAST_NAME, MANAGER_EMP_ID, HIRE_DATE, EMPLOYEE_ROLE_ID) 
VALUES (CUST_EMPLOY.NEXTVAL,'Rory','Delaney','603','07/05/2013', 2);
INSERT INTO EMPLOYEES (EMPLOYEE_ID, EMP_FIRST_NAME, EMP_LAST_NAME, MANAGER_EMP_ID, HIRE_DATE, EMPLOYEE_ROLE_ID) 
VALUES (CUST_EMPLOY.NEXTVAL,'Shane','Herlihy','603','12/15/2013', 6);
INSERT INTO EMPLOYEES (EMPLOYEE_ID, EMP_FIRST_NAME, EMP_LAST_NAME, MANAGER_EMP_ID, HIRE_DATE, EMPLOYEE_ROLE_ID) 
VALUES (CUST_EMPLOY.NEXTVAL,'Niamh','Hendy','603','12/10/2013', 6);
INSERT INTO EMPLOYEES (EMPLOYEE_ID, EMP_FIRST_NAME, EMP_LAST_NAME, MANAGER_EMP_ID, HIRE_DATE, EMPLOYEE_ROLE_ID) 
VALUES (CUST_EMPLOY.NEXTVAL,'Siobhain','Byrne','603','01/03/2014', 6);
INSERT INTO EMPLOYEES (EMPLOYEE_ID, EMP_FIRST_NAME, EMP_LAST_NAME, MANAGER_EMP_ID, HIRE_DATE, EMPLOYEE_ROLE_ID) 
VALUES (CUST_EMPLOY.NEXTVAL,'Jonathan','Cody','603','02/15/2014', 7);
INSERT INTO EMPLOYEES (EMPLOYEE_ID, EMP_FIRST_NAME, EMP_LAST_NAME, MANAGER_EMP_ID, HIRE_DATE, EMPLOYEE_ROLE_ID) 
VALUES (CUST_EMPLOY.NEXTVAL,'Donnacha','Holmes','603','02/10/2014', 5);
END;
/

SELECT * FROM EMPLOYEES;
---------------------------------------------------------------------------------------------
CREATING & POPULATING THE INVENTORY TABLE [9 OUT OF 12] 
---------------------------------------------------------------------------------------------

CREATE TABLE INVENTORY(
STOCK_ID int,
INVENTORY_NAME varchar(255) NOT NULL,
STOCK_QUANTITY int NOT NULL,
LIST_PRICE DECIMAL (7,2) NOT NULL,
STOCK_RECEIVED DATE NOT NULL,
PRODUCT_ID int,
SUPPLY_ID int,
PET_ID int,
PRIMARY KEY (STOCK_ID),
FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCTS (PRODUCT_ID),
FOREIGN KEY (SUPPLY_ID) REFERENCES SUPPLIES (SUPPLY_ID),
FOREIGN KEY (PET_ID) REFERENCES PETS (PET_ID)
);

DESCRIBE INVENTORY;

CREATE SEQUENCE CUST_INVENT
MINVALUE 1
START WITH 1001
INCREMENT BY 1
CACHE 10;

BEGIN
INSERT INTO INVENTORY (STOCK_ID , INVENTORY_NAME , STOCK_QUANTITY, LIST_PRICE, STOCK_RECEIVED, PRODUCT_ID) VALUES (CUST_INVENT.NEXTVAL,'Tennis Ball','100','.99','01/01/2014', 101);
INSERT INTO INVENTORY (STOCK_ID , INVENTORY_NAME , STOCK_QUANTITY, LIST_PRICE, STOCK_RECEIVED, PRODUCT_ID) VALUES (CUST_INVENT.NEXTVAL,'Holee Roller Ball','50','4.99','01/01/2014', 101);
INSERT INTO INVENTORY (STOCK_ID , INVENTORY_NAME , STOCK_QUANTITY, LIST_PRICE, STOCK_RECEIVED, PRODUCT_ID) VALUES (CUST_INVENT.NEXTVAL,'Kong Rubber Toy','50','3.99','02/01/2014', 101);
INSERT INTO INVENTORY (STOCK_ID , INVENTORY_NAME , STOCK_QUANTITY, LIST_PRICE, STOCK_RECEIVED, PRODUCT_ID) VALUES (CUST_INVENT.NEXTVAL,'Buster Cube','50','4.99','02/05/2014', 101);
INSERT INTO INVENTORY (STOCK_ID , INVENTORY_NAME , STOCK_QUANTITY, LIST_PRICE, STOCK_RECEIVED, PRODUCT_ID) VALUES (CUST_INVENT.NEXTVAL,'Omega Paw Tricky Treat Ball','40','7.99','02/05/2014', 101);
INSERT INTO INVENTORY (STOCK_ID , INVENTORY_NAME , STOCK_QUANTITY, LIST_PRICE, STOCK_RECEIVED, PRODUCT_ID) VALUES (CUST_INVENT.NEXTVAL,'KONG Sitting Frog Dog Toy','40','9.99','02/05/2014', 101);
INSERT INTO INVENTORY (STOCK_ID , INVENTORY_NAME , STOCK_QUANTITY, LIST_PRICE, STOCK_RECEIVED, PRODUCT_ID) VALUES (CUST_INVENT.NEXTVAL,'Dog Ipod','40','99.99','02/05/2014', 110);
INSERT INTO INVENTORY (STOCK_ID , INVENTORY_NAME , STOCK_QUANTITY, LIST_PRICE, STOCK_RECEIVED, PRODUCT_ID) VALUES (CUST_INVENT.NEXTVAL,'Dog Glass','10','499.99','02/05/2014', 110);
INSERT INTO INVENTORY (STOCK_ID , INVENTORY_NAME , STOCK_QUANTITY, LIST_PRICE, STOCK_RECEIVED, PRODUCT_ID) VALUES (CUST_INVENT.NEXTVAL,'Red Bowl','40','9.99','02/05/2014', 103);
INSERT INTO INVENTORY (STOCK_ID , INVENTORY_NAME , STOCK_QUANTITY, LIST_PRICE, STOCK_RECEIVED, PRODUCT_ID) VALUES (CUST_INVENT.NEXTVAL,'Purple Bowl','40','9.99','02/05/2014', 103);
INSERT INTO INVENTORY (STOCK_ID , INVENTORY_NAME , STOCK_QUANTITY, LIST_PRICE, STOCK_RECEIVED, PRODUCT_ID) VALUES (CUST_INVENT.NEXTVAL,'Green Bowl','40','2.99','02/05/2014', 103);
INSERT INTO INVENTORY (STOCK_ID , INVENTORY_NAME , STOCK_QUANTITY, LIST_PRICE, STOCK_RECEIVED, SUPPLY_ID) VALUES (CUST_INVENT.NEXTVAL,'Meow Yum Yums! ','100','.99','01/01/2014', 201);
INSERT INTO INVENTORY (STOCK_ID , INVENTORY_NAME , STOCK_QUANTITY, LIST_PRICE, STOCK_RECEIVED, SUPPLY_ID) VALUES (CUST_INVENT.NEXTVAL,'Barktastic! ','100','2.99','01/01/2014', 203);
INSERT INTO INVENTORY (STOCK_ID , INVENTORY_NAME , STOCK_QUANTITY, LIST_PRICE, STOCK_RECEIVED, SUPPLY_ID) VALUES (CUST_INVENT.NEXTVAL,'Barktastic! Now Wet!','100','3.99','01/01/2014', 204);
INSERT INTO INVENTORY (STOCK_ID , INVENTORY_NAME , STOCK_QUANTITY, LIST_PRICE, STOCK_RECEIVED, SUPPLY_ID) VALUES (CUST_INVENT.NEXTVAL,'Kitty Cat Bites! ','100','.99','01/01/2014', 201);
INSERT INTO INVENTORY (STOCK_ID , INVENTORY_NAME , STOCK_QUANTITY, LIST_PRICE, STOCK_RECEIVED, SUPPLY_ID) VALUES (CUST_INVENT.NEXTVAL,'Smokey Delights! ','100','.99','01/01/2014', 202);
INSERT INTO INVENTORY (STOCK_ID , INVENTORY_NAME , STOCK_QUANTITY, LIST_PRICE, STOCK_RECEIVED, SUPPLY_ID) VALUES (CUST_INVENT.NEXTVAL,'I Cant Believe this is Cat Food!','40','6.99','01/01/2014', 202);
INSERT INTO INVENTORY (STOCK_ID , INVENTORY_NAME , STOCK_QUANTITY, LIST_PRICE, STOCK_RECEIVED, SUPPLY_ID) VALUES (CUST_INVENT.NEXTVAL,'I Cant Believe this is Dog Food!','40','6.99','01/01/2014', 204);
INSERT INTO INVENTORY (STOCK_ID , INVENTORY_NAME , STOCK_QUANTITY, LIST_PRICE, STOCK_RECEIVED, PET_ID) VALUES (CUST_INVENT.NEXTVAL,'German Shepard','1','999.99','01/01/2014', 301);
INSERT INTO INVENTORY (STOCK_ID , INVENTORY_NAME , STOCK_QUANTITY, LIST_PRICE, STOCK_RECEIVED, PET_ID) VALUES (CUST_INVENT.NEXTVAL,'Grey Tabby','1','555.99','01/01/2014', 302);
INSERT INTO INVENTORY (STOCK_ID , INVENTORY_NAME , STOCK_QUANTITY, LIST_PRICE, STOCK_RECEIVED, PET_ID) VALUES (CUST_INVENT.NEXTVAL,'White Tabby','1','666.99','01/01/2014', 303);
INSERT INTO INVENTORY (STOCK_ID , INVENTORY_NAME , STOCK_QUANTITY, LIST_PRICE, STOCK_RECEIVED, PET_ID) VALUES (CUST_INVENT.NEXTVAL,'Python','1','999.99','01/01/2014', 304);
INSERT INTO INVENTORY (STOCK_ID , INVENTORY_NAME , STOCK_QUANTITY, LIST_PRICE, STOCK_RECEIVED, PET_ID) VALUES (CUST_INVENT.NEXTVAL,'Premier Black Poodle','1','2666.99','01/01/2014', 305);
INSERT INTO INVENTORY (STOCK_ID , INVENTORY_NAME , STOCK_QUANTITY, LIST_PRICE, STOCK_RECEIVED, PET_ID) VALUES (CUST_INVENT.NEXTVAL,'Premier White Poodle','1','2000.99','02/01/2014', 306);
INSERT INTO INVENTORY (STOCK_ID , INVENTORY_NAME , STOCK_QUANTITY, LIST_PRICE, STOCK_RECEIVED, PET_ID) VALUES (CUST_INVENT.NEXTVAL,'German Shepard','1','666.99','02/01/2014', 307);
INSERT INTO INVENTORY (STOCK_ID , INVENTORY_NAME , STOCK_QUANTITY, LIST_PRICE, STOCK_RECEIVED, PET_ID) VALUES (CUST_INVENT.NEXTVAL,'English Foxhound','1','666.99','02/15/2014', 308);
INSERT INTO INVENTORY (STOCK_ID , INVENTORY_NAME , STOCK_QUANTITY, LIST_PRICE, STOCK_RECEIVED, PET_ID) VALUES (CUST_INVENT.NEXTVAL,'Chihuahua','1','776.99','02/14/2014', 309);
INSERT INTO INVENTORY (STOCK_ID , INVENTORY_NAME , STOCK_QUANTITY, LIST_PRICE, STOCK_RECEIVED, PET_ID) VALUES (CUST_INVENT.NEXTVAL,'Tabby','1','333.99','03/16/2014', 310);
INSERT INTO INVENTORY (STOCK_ID , INVENTORY_NAME , STOCK_QUANTITY, LIST_PRICE, STOCK_RECEIVED, PET_ID) VALUES (CUST_INVENT.NEXTVAL,'Cuban Red Macaw','1','1454.55','04/17/2014', 311);
INSERT INTO INVENTORY (STOCK_ID , INVENTORY_NAME , STOCK_QUANTITY, LIST_PRICE, STOCK_RECEIVED, PET_ID) VALUES (CUST_INVENT.NEXTVAL,'Cliff Parakeet','1','1255.55','05/01/2014', 312);
INSERT INTO INVENTORY (STOCK_ID , INVENTORY_NAME , STOCK_QUANTITY, LIST_PRICE, STOCK_RECEIVED, PET_ID) VALUES (CUST_INVENT.NEXTVAL,'Blue-cheeked Amazon','1','2999.99','05/05/2014', 313);
INSERT INTO INVENTORY (STOCK_ID , INVENTORY_NAME , STOCK_QUANTITY, LIST_PRICE, STOCK_RECEIVED, PET_ID) VALUES (CUST_INVENT.NEXTVAL,'Blue-cheeked Amazon','1','3000.99','05/05/2014', 314);
END;
/

---------------------------------------------------------------------------------------------
CREATING & POPULATING THE ORDERS TABLE [10 OUT OF 12] 
---------------------------------------------------------------------------------------------

CREATE TABLE ORDERS(
ORDER_ID int,
ORDER_DATE date NOT NULL,
CUSTOMER_ID int NOT NULL,
EMPLOYEE_ID int NOT NULL,
PRIMARY KEY (ORDER_ID),
FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMERS (CUSTOMER_ID),
FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEES (EMPLOYEE_ID)
);

DESCRIBE ORDER;

CREATE SEQUENCE CUST_ORDERS
MINVALUE 1
START WITH 701
INCREMENT BY 1
CACHE 10;

BEGIN
INSERT INTO ORDERS (ORDER_ID, ORDER_DATE, CUSTOMER_ID, EMPLOYEE_ID) VALUES(CUST_ORDERS.NEXTVAL,'04/05/2014', 501, 605);
INSERT INTO ORDERS (ORDER_ID, ORDER_DATE, CUSTOMER_ID, EMPLOYEE_ID) VALUES(CUST_ORDERS.NEXTVAL,'04/07/2014', 501, 606);
INSERT INTO ORDERS (ORDER_ID, ORDER_DATE, CUSTOMER_ID, EMPLOYEE_ID) VALUES(CUST_ORDERS.NEXTVAL,'04/05/2014', 503, 607);
INSERT INTO ORDERS (ORDER_ID, ORDER_DATE, CUSTOMER_ID, EMPLOYEE_ID) VALUES(CUST_ORDERS.NEXTVAL,'04/05/2014', 502, 605);
INSERT INTO ORDERS (ORDER_ID, ORDER_DATE, CUSTOMER_ID, EMPLOYEE_ID) VALUES(CUST_ORDERS.NEXTVAL,'04/05/2014', 502, 605);
INSERT INTO ORDERS (ORDER_ID, ORDER_DATE, CUSTOMER_ID, EMPLOYEE_ID) VALUES(CUST_ORDERS.NEXTVAL,'04/05/2014', 507, 608);
INSERT INTO ORDERS (ORDER_ID, ORDER_DATE, CUSTOMER_ID, EMPLOYEE_ID) VALUES(CUST_ORDERS.NEXTVAL,'04/05/2014', 505, 608);
INSERT INTO ORDERS (ORDER_ID, ORDER_DATE, CUSTOMER_ID, EMPLOYEE_ID) VALUES(CUST_ORDERS.NEXTVAL,'04/05/2014', 508, 608);
INSERT INTO ORDERS (ORDER_ID, ORDER_DATE, CUSTOMER_ID, EMPLOYEE_ID) VALUES(CUST_ORDERS.NEXTVAL,'04/08/2014', 504, 610);
INSERT INTO ORDERS (ORDER_ID, ORDER_DATE, CUSTOMER_ID, EMPLOYEE_ID) VALUES(CUST_ORDERS.NEXTVAL,'04/08/2014', 504, 610);
END;
/


--------------------------------------------------------------------------------------------
CREATING & POPULATING THE ORDER DETAILS TABLE [11 OUT OF 12] 
---------------------------------------------------------------------------------------------

CREATE TABLE ORDER_DETAILS(
ORDER_DETAILS_ID int,
ORDER_ID int NOT NULL,
ORDER_QUANTITY varchar(255) NOT NULL,
STOCK_ID int NOT NULL,
PRIMARY KEY (ORDER_DETAILS_ID),
FOREIGN KEY (ORDER_ID) REFERENCES ORDERS (ORDER_ID),
FOREIGN KEY (STOCK_ID) REFERENCES INVENTORY (STOCK_ID)
);

DESCRIBE ORDER_DETAILS;

CREATE SEQUENCE CUST_ORDERD
MINVALUE 1
START WITH 801
INCREMENT BY 1
CACHE 10;

BEGIN
INSERT INTO ORDER_DETAILS (ORDER_DETAILS_ID, ORDER_ID, ORDER_QUANTITY, STOCK_ID) VALUES(CUST_ORDERD.NEXTVAL,'701', '7', 1001);
INSERT INTO ORDER_DETAILS (ORDER_DETAILS_ID, ORDER_ID, ORDER_QUANTITY, STOCK_ID) VALUES(CUST_ORDERD.NEXTVAL,'701', '1', 1020);
INSERT INTO ORDER_DETAILS (ORDER_DETAILS_ID, ORDER_ID, ORDER_QUANTITY, STOCK_ID) VALUES(CUST_ORDERD.NEXTVAL,'702', '2', 1004);
INSERT INTO ORDER_DETAILS (ORDER_DETAILS_ID, ORDER_ID, ORDER_QUANTITY, STOCK_ID) VALUES(CUST_ORDERD.NEXTVAL,'702', '1', 1007);
INSERT INTO ORDER_DETAILS (ORDER_DETAILS_ID, ORDER_ID, ORDER_QUANTITY, STOCK_ID) VALUES(CUST_ORDERD.NEXTVAL,'703', '1', 1013);
INSERT INTO ORDER_DETAILS (ORDER_DETAILS_ID, ORDER_ID, ORDER_QUANTITY, STOCK_ID) VALUES(CUST_ORDERD.NEXTVAL,'703', '2', 1009);
INSERT INTO ORDER_DETAILS (ORDER_DETAILS_ID, ORDER_ID, ORDER_QUANTITY, STOCK_ID) VALUES(CUST_ORDERD.NEXTVAL,'703', '1', 1006);
INSERT INTO ORDER_DETAILS (ORDER_DETAILS_ID, ORDER_ID, ORDER_QUANTITY, STOCK_ID) VALUES(CUST_ORDERD.NEXTVAL,'704', '1', 1024);
INSERT INTO ORDER_DETAILS (ORDER_DETAILS_ID, ORDER_ID, ORDER_QUANTITY, STOCK_ID) VALUES(CUST_ORDERD.NEXTVAL,'705', '2', 1012);
INSERT INTO ORDER_DETAILS (ORDER_DETAILS_ID, ORDER_ID, ORDER_QUANTITY, STOCK_ID) VALUES(CUST_ORDERD.NEXTVAL,'705', '10', 1018);
INSERT INTO ORDER_DETAILS (ORDER_DETAILS_ID, ORDER_ID, ORDER_QUANTITY, STOCK_ID) VALUES(CUST_ORDERD.NEXTVAL,'706', '1', 1016);
INSERT INTO ORDER_DETAILS (ORDER_DETAILS_ID, ORDER_ID, ORDER_QUANTITY, STOCK_ID) VALUES(CUST_ORDERD.NEXTVAL,'708', '2', 1015);
INSERT INTO ORDER_DETAILS (ORDER_DETAILS_ID, ORDER_ID, ORDER_QUANTITY, STOCK_ID) VALUES(CUST_ORDERD.NEXTVAL,'708', '1', 1032);
END;
/

---------------------------------------------------------------------------------------------
CREATING & POPULATING THE DISCOUNTS TABLE [12 OUT OF 12] 
---------------------------------------------------------------------------------------------

CREATE TABLE DISCOUNTS(
DISCOUNT_ID int,
DISCOUNT_CODE varchar(255) NOT NULL,
DESCRIPTION varchar(255) NOT NULL,
ORDER_ID int NOT NULL,
PRIMARY KEY (DISCOUNT_ID),
FOREIGN KEY (ORDER_ID)
REFERENCES ORDERS (ORDER_ID)
);

DESCRIBE ORDER;

CREATE SEQUENCE CUST_DISC
MINVALUE 1
START WITH 901
INCREMENT BY 1
CACHE 10;

BEGIN
INSERT INTO DISCOUNTS (DISCOUNT_ID, DISCOUNT_CODE, DESCRIPTION, ORDER_ID) VALUES(CUST_DISC.NEXTVAL,'20%OFF', '20% Discount on Total Purchase', 701);
INSERT INTO DISCOUNTS (DISCOUNT_ID, DISCOUNT_CODE, DESCRIPTION, ORDER_ID) VALUES(CUST_DISC.NEXTVAL,'10%OFF', '10% Discount on Total Purchase', 704);
INSERT INTO DISCOUNTS (DISCOUNT_ID, DISCOUNT_CODE, DESCRIPTION, ORDER_ID) VALUES(CUST_DISC.NEXTVAL,'5%OFF', '5% Discount on Total Purchase', 705);
END;
/

-----------------------------------------------------------------------------------
CREATING THE EMPLOYEE & DEPARTMENT JUNCTION TABLE [1 OUT OF 2]
-----------------------------------------------------------------------------------

CREATE TABLE EMPLOYEE_DEPARTMENTS
  (
    EMPLOYEE_ID int NOT NULL,
    DEPT_NO int NOT NULL,
    CONSTRAINT PK_EMPLOYEE_DEPARTMENTS PRIMARY KEY
  (
   EMPLOYEE_ID,
   DEPT_NO
  ),
     FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEES (EMPLOYEE_ID),
     FOREIGN KEY (DEPT_NO) REFERENCES DEPARTMENTS (DEPT_NO)
);

DESCRIBE EMPLOYEE_DEPARTMENTS;

BEGIN
INSERT INTO EMPLOYEE_DEPARTMENTS (EMPLOYEE_ID, DEPT_NO) VALUES (601,6);
INSERT INTO EMPLOYEE_DEPARTMENTS (EMPLOYEE_ID, DEPT_NO) VALUES (601,7);
INSERT INTO EMPLOYEE_DEPARTMENTS (EMPLOYEE_ID, DEPT_NO) VALUES (601,8);
INSERT INTO EMPLOYEE_DEPARTMENTS (EMPLOYEE_ID, DEPT_NO) VALUES (602,9);
INSERT INTO EMPLOYEE_DEPARTMENTS (EMPLOYEE_ID, DEPT_NO) VALUES (602,10);
INSERT INTO EMPLOYEE_DEPARTMENTS (EMPLOYEE_ID, DEPT_NO) VALUES (603,9);
INSERT INTO EMPLOYEE_DEPARTMENTS (EMPLOYEE_ID, DEPT_NO) VALUES (603,10);
INSERT INTO EMPLOYEE_DEPARTMENTS (EMPLOYEE_ID, DEPT_NO) VALUES (604,1);
INSERT INTO EMPLOYEE_DEPARTMENTS (EMPLOYEE_ID, DEPT_NO) VALUES (604,2);
INSERT INTO EMPLOYEE_DEPARTMENTS (EMPLOYEE_ID, DEPT_NO) VALUES (604,3);
INSERT INTO EMPLOYEE_DEPARTMENTS (EMPLOYEE_ID, DEPT_NO) VALUES (604,9);
INSERT INTO EMPLOYEE_DEPARTMENTS (EMPLOYEE_ID, DEPT_NO) VALUES (605,1);
INSERT INTO EMPLOYEE_DEPARTMENTS (EMPLOYEE_ID, DEPT_NO) VALUES (605,9);
INSERT INTO EMPLOYEE_DEPARTMENTS (EMPLOYEE_ID, DEPT_NO) VALUES (606,3);
INSERT INTO EMPLOYEE_DEPARTMENTS (EMPLOYEE_ID, DEPT_NO) VALUES (607,4);
INSERT INTO EMPLOYEE_DEPARTMENTS (EMPLOYEE_ID, DEPT_NO) VALUES (608,9);
INSERT INTO EMPLOYEE_DEPARTMENTS (EMPLOYEE_ID, DEPT_NO) VALUES (609,6);
INSERT INTO EMPLOYEE_DEPARTMENTS (EMPLOYEE_ID, DEPT_NO) VALUES (610,5);
END;
/

Junction Sub-Query Statements

SELECT EMP_FIRST_NAME, DEPT_NAME
FROM EMPLOYEE_DEPARTMENTS
JOIN EMPLOYEES ON EMPLOYEES.EMPLOYEE_ID = EMPLOYEE_DEPARTMENTS.EMPLOYEE_ID 
JOIN DEPARTMENTS ON DEPARTMENTS.DEPT_NO = EMPLOYEE_DEPARTMENTS.DEPT_NO

-----------------------------------------------------------------------------------
CREATING THE PETS & ANIMAL BREEDERS JUNCTION TABLE [2 OUT OF 2]
-----------------------------------------------------------------------------------
CREATE TABLE PETS_ANIMAL_BREEDERS
  (
     PET_ID int NOT NULL,
     BREEDER_ID int NOT NULL,
     CONSTRAINT PK_PETS_ANIMAL_BREEDERS PRIMARY KEY
  (
  PET_ID,
  BREEDER_ID
  ),
    FOREIGN KEY (PET_ID) REFERENCES PETS (PET_ID),
    FOREIGN KEY (BREEDER_ID) REFERENCES ANIMAL_BREEDERS (BREEDER_ID)
 );

DESCRIBE PETS_ANIMAL_BREEDERS;

BEGIN
INSERT INTO PETS_ANIMAL_BREEDERS (PET_ID, BREEDER_ID) VALUES (301,401);
INSERT INTO PETS_ANIMAL_BREEDERS (PET_ID, BREEDER_ID) VALUES (302,402);
INSERT INTO PETS_ANIMAL_BREEDERS (PET_ID, BREEDER_ID) VALUES (303,402);
INSERT INTO PETS_ANIMAL_BREEDERS (PET_ID, BREEDER_ID) VALUES (304,403);
INSERT INTO PETS_ANIMAL_BREEDERS (PET_ID, BREEDER_ID) VALUES (305,403);
INSERT INTO PETS_ANIMAL_BREEDERS (PET_ID, BREEDER_ID) VALUES (306,404);
INSERT INTO PETS_ANIMAL_BREEDERS (PET_ID, BREEDER_ID) VALUES (307,404);
INSERT INTO PETS_ANIMAL_BREEDERS (PET_ID, BREEDER_ID) VALUES (308,405);
INSERT INTO PETS_ANIMAL_BREEDERS (PET_ID, BREEDER_ID) VALUES (309,405);
INSERT INTO PETS_ANIMAL_BREEDERS (PET_ID, BREEDER_ID) VALUES (310,406);
INSERT INTO PETS_ANIMAL_BREEDERS (PET_ID, BREEDER_ID) VALUES (311,407);
INSERT INTO PETS_ANIMAL_BREEDERS (PET_ID, BREEDER_ID) VALUES (312,408);
INSERT INTO PETS_ANIMAL_BREEDERS (PET_ID, BREEDER_ID) VALUES (313,406);
INSERT INTO PETS_ANIMAL_BREEDERS (PET_ID, BREEDER_ID) VALUES (314,410);
END;
/

SELECT BIRTH_DATE, GENDER, SPECIES, COMPANY, COUNTRY
FROM PETS_ANIMAL_BREEDERS
JOIN PETS ON PETS.PET_ID = PETS_ANIMAL_BREEDERS.PET_ID
JOIN ANIMAL_BREEDERS ON ANIMAL_BREEDERS.BREEDER_ID = PETS_ANIMAL_BREEDERS.BREEDER_ID

------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------------------------------------------------------
Q2. 4 INNER JOIN Queries - With Descriptions
----------------------------------------------------------------------------------------------------------------------------------------------

/* Inner Join 1: List of each department each employee works in. The junction table is used to make the inner join work between the two tables
				 and to solve the many to many problem e.g many employees work in many departments */

SELECT
E.EMPLOYEE_ID,
E.EMP_FIRST_NAME|| ' ' || E.EMP_LAST_NAME AS EMPLOYEE_FULL_NAME,
ED.DEPT_NO
FROM EMPLOYEES E
INNER JOIN EMPLOYEE_DEPARTMENTS ED
ON E.EMPLOYEE_ID = ED.EMPLOYEE_ID
ORDER BY E.EMPLOYEE_ID DESC;

/* Inner Join 2: An inner join between order details and inventory. This query shows the total order price of each order item by
				 calculating the list price vs order quantity. This inner join gives a list of products, supply and pet highlighting
				 the most expensive orders per category in a descending order. */

SELECT
OD.ORDER_ID,
OD.STOCK_ID,
OD.ORDER_QUANTITY,
I.INVENTORY_NAME,
I.LIST_PRICE,
I.LIST_PRICE*OD.ORDER_QUANTITY AS TOTAL_PRICE
FROM ORDER_DETAILS OD
INNER JOIN INVENTORY I
ON OD.STOCK_ID = I.STOCK_ID
ORDER BY OD.ORDER_ID DESC;

/* Inner Join 3: An inner join between the employee table and employee role. This combines essential information together
				 to know which employee started at what time and what their title/salary is.*/

SELECT
E.EMP_FIRST_NAME|| ' ' || E.EMP_LAST_NAME AS EMPLOYEE_FULL_NAM,
E.HIRE_DATE,
ER.JOB_TITLE,
ER.JOB_SALARY
FROM EMPLOYEES E
INNER JOIN EMPLOYEE_ROLE ER
ON E.EMPLOYEE_ROLE_ID = ER.EMPLOYEE_ROLE_ID
ORDER BY ER.JOB_SALARY DESC;

/* Inner Join 4: An inner join between the pets table and animal breeders table. This allows the petstore to know the origin
				 of each animal with the breeder identification beside it. */

SELECT
P.PET_ID,
P.BIRTH_DATE,
P.SPECIES,
P.GENDER,
PAB.BREEDER_ID
FROM PETS P
INNER JOIN PETS_ANIMAL_BREEDERS PAB
ON P.PET_ID = PAB.PET_ID
ORDER BY P.PET_ID DESC;

----------------------------------------------------------------------------------------------------------------------------------------------
Q3. 6 OUTER JOIN Queries (2 x left, 2 x full, 2 x right) With Descriptions 
----------------------------------------------------------------------------------------------------------------------------------------------

/* Left Outer Join 1: This query returns employees full name with any orders they have processed and shows which employees 
					  have not yet processed orders. The list is ordered by employee first name. */

SELECT 
E.EMP_FIRST_NAME|| ' ' || E.EMP_LAST_NAME AS EMPLOYEE_FULL_NAM,
O.ORDER_DATE,
O.ORDER_ID
FROM EMPLOYEES E
LEFT OUTER JOIN ORDERS O
ON E.EMPLOYEE_ID = O.EMPLOYEE_ID
ORDER BY E.EMP_FIRST_NAME;

/* Left Outer Join 2: This query returns the product category, with the product brand, name of the product, list price and stock id.
					  The query highlights the fact that the store only has a limited amount of products and brands available in stock.*/

SELECT
P.PRODUCT_CATEGORY,
P.PRODUCT_BRAND,
I.INVENTORY_NAME,
I.LIST_PRICE,
I.STOCK_ID
FROM PRODUCTS P
LEFT OUTER JOIN INVENTORY I
ON P.PRODUCT_ID = I.PRODUCT_ID
ORDER BY P.PRODUCT_BRAND ASC

/* Full Outer Join 1: This full outer join returns rows from the Customers table (left table), and rows from the Orders table (right table).
					  This query shows all customers with or without there order number / order date. Note that customers are not 
					  required to purchase a product, supply or pet to be allowed on to the database.*/

SELECT
C.CUSTOMER_ID,
C.CUST_FIRST_NAME || ' ' || C.CUST_LAST_NAME AS CUSTOMER_FULL_NAME,
O.ORDER_ID,
O.ORDER_DATE
FROM CUSTOMERS C
FULL OUTER JOIN ORDERS O
ON C.CUSTOMER_ID = O.CUSTOMER_ID
ORDER BY O.ORDER_ID ASC;

/* Full Outer Join 2: This full outer join returns rows from the Discounts table (left table) and rows from the Orders table (right table).
					  This query shows all discounts available on orders (ascending). The rows without discounts are also displayed. */

SELECT
D.DISCOUNT_ID,
D.DISCOUNT_CODE,
O.ORDER_ID
FROM DISCOUNTS D
FULL OUTER JOIN ORDERS O
ON D.ORDER_ID = O.ORDER_ID
ORDER BY D.DISCOUNT_ID ASC;

/* Right Outer Join 1: This right outer join displays the animals in the recorded inventory in the shop with comprehensive information.*/

SELECT	
I.STOCK_ID,
I.INVENTORY_NAME AS PET_NAME,
P.BIRTH_DATE,
P.SPECIES,
P.GENDER,
P.BREEDER_ID
FROM	
INVENTORY I
RIGHT OUTER JOIN PETS P
ON	P.PET_ID = I.PET_ID
ORDER BY I.STOCK_ID	DESC;

/* Right Outer Join 2: This right outer join shows all orders placed to date alongside the customer and employee involved. 
					   The details for the order item, order quantity and stock id further enhance the information. */

SELECT
O.ORDER_ID,
O.ORDER_DATE,
O.CUSTOMER_ID,
O.EMPLOYEE_ID,
OD.ORDER_DETAILS_ID,
OD.ORDER_ID,
OD.ORDER_QUANTITY,
OD.STOCK_ID
FROM ORDERS O
RIGHT OUTER JOIN ORDER_DETAILS OD
ON O.ORDER_ID= OD.ORDER_ID
ORDER BY O.ORDER_ID ASC;

----------------------------------------------------------------------------------------------------------------------------------------------
Q4. 1 CUBE Query (With at least 2 Columns)
----------------------------------------------------------------------------------------------------------------------------------------------

/* Cube Query - This query displays each of the order details id, the stock ID and the sum of all orders.
				The cube query has been grouped to show which products are selling the most with a final output 
				of the total sales revenue*/

SELECT
OD.ORDER_DETAILS_ID,
OD.STOCK_ID,
SUM(I.LIST_PRICE * I.STOCK_QUANTITY) AS SUM_OF_ALL_ORDERS
FROM ORDER_DETAILS OD
JOIN INVENTORY I 
ON OD.STOCK_ID = I.STOCK_ID
GROUP BY CUBE (OD.ORDER_DETAILS_ID,OD.STOCK_ID)
ORDER BY OD.ORDER_DETAILS_ID, OD.STOCK_ID;

----------------------------------------------------------------------------------------------------------------------------------------------
Q5. 5 Examples of Sub-Queries
----------------------------------------------------------------------------------------------------------------------------------------------

/* Sub-Query 1: The store wants to send out promotional leaflets to customers with addresses in Dublin.
				Please note that customers are anyone who have come into the store and offered to be registered by staff
				on to the database. This means that they may or may not have a sale. */

SELECT
CUSTOMER_ID,
CUST_FIRST_NAME || ' ' || CUST_LAST_NAME AS CUSTOMER_FULL_NAME
FROM
CUSTOMERS
WHERE CUST_COUNTY ='Dublin'
ORDER BY CUSTOMER_FULL_NAME;

/* Sub-Query 2: The store manager wants to order more male/female cats from the animal breeders but wants to balance the gender ratio out with dogs.
				The following query gives him a quick count.*/

SELECT
SPECIES,
GENDER, 
COUNT(*) 
FROM PETS
WHERE
(SPECIES = 'Cat' AND GENDER = 'Female') OR
(SPECIES = 'Dog' AND GENDER = 'Female')
GROUP BY SPECIES, GENDER
ORDER BY SPECIES; 

/* Sub-Query 3: The store manager is suspicious of staff handing out the 20% discount code and applying it to too many orders.
				The query below shows that the manager had nothing to worry about after all!*/

SELECT 
D.DISCOUNT_ID,
D.DISCOUNT_CODE,
D.DESCRIPTION,
O.ORDER_ID
FROM DISCOUNTS D
JOIN ORDERS O
ON D.ORDER_ID=O.ORDER_ID
WHERE D.DISCOUNT_CODE = '20%OFF';

/* Sub-Query 4: The store manager wants to know what is the most valuable item in the stores inventory i.e if its a Product, Supply or Pet */

SELECT
STOCK_ID,
INVENTORY_NAME,
LIST_PRICE,
PRODUCT_ID,
SUPPLY_ID,
PET_ID
FROM
INVENTORY
WHERE LIST_PRICE = (SELECT MAX(LIST_PRICE) FROM INVENTORY);

/* Sub-Query 5: The store manager wants to find out the lowest paid staff in the company.
				He will then review each of the candidates individually to see who is ambitious enough for the promotion.*/

SELECT
E.EMPLOYEE_ID,
E.EMP_FIRST_NAME,
E.EMP_LAST_NAME,
ER.JOB_SALARY,
ER.JOB_TITLE
FROM
EMPLOYEES E
JOIN EMPLOYEE_ROLE ER
ON E.EMPLOYEE_ROLE_ID = ER.EMPLOYEE_ROLE_ID
WHERE ER.JOB_SALARY = (SELECT MIN(JOB_SALARY) FROM EMPLOYEE_ROLE);

----------------------------------------------------------------------------------------------------------------------------------------------
Q6. 5 PL/SQL procedures as part of one package. One procedure must demonstrate each of the following

	- The use of a cursor
	- The use of save points
	- The use of rollback
----------------------------------------------------------------------------------------------------------------------------------------------

/* TEST STATEMENTS & COMMENTS

-- Procedure 1
BEGIN
PETSTORE_PACKAGE.REMOVELAST_DISCOUNT;
END;
/

-- Procedure 2
BEGIN
PETSTORE_PACKAGE.STOCK_LOOKUP(1007);
END;
/ 

-- Procedure 3
BEGIN
PETSTORE_PACKAGE.COMPARE_INVENTORY(1001, 1010);
END;
/

-- Procedure 4
BEGIN
PETSTORE_PACKAGE.SHOW_EMPLOYEE_DETAILS(900000000);
END;
/

-- Procedure 5 - I didn't have time to impement it! :( 

*/

-- Creating package PETSTORE_PACKAGE with 5 procedures 
CREATE OR REPLACE PACKAGE PETSTORE_PACKAGE AS
PROCEDURE REMOVELAST_DISCOUNT;
PROCEDURE STOCK_LOOKUP(INPUT_ID IN NUMBER);
PROCEDURE COMPARE_INVENTORY (INPUT1 IN NUMBER, INPUT2 IN NUMBER);
PROCEDURE SHOW_EMPLOYEE_DETAILS (INPUT1 IN NUMBER);
--PROCEDURE EMPLOYEE_SALARY_RANGE;
END PETSTORE_PACKAGE;
/

CREATE OR REPLACE PACKAGE BODY PETSTORE_PACKAGE AS

/* Procedure 1 - This procedure removes the last entered discount
from the discounts table. This way discounts are for a limited only! */

PROCEDURE REMOVELAST_DISCOUNT
IS
BEGIN

-- Savepoint created before discount removal
SAVEPOINT BEFORE_DISCOUNT_REMOVAL;

-- Selecting where to delete from */	
DELETE FROM DISCOUNTS
-- When row number is less or equal to 1
WHERE ROWNUM <=1;

-- Rollback on Error
-- Print statement on successfully removing oldest discount offer 
DBMS_OUTPUT.PUT_LINE('SUCCESSFULLY REMOVED OLDEST DISCOUNT OFFER');
EXCEPTION
-- When others output error message
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('WARNING! YOU HAVE FAILED TO REMOVE OLDEST DISCOUNT!');
-- Rollback to before discount removal
ROLLBACK TO BEFORE_DISCOUNT_REMOVAL;
END;

/* Procedure 2 - This procedure allows the user to look up items and the price of those items! */

PROCEDURE STOCK_LOOKUP (INPUT_ID IN NUMBER)
AS
INPUT_1 NUMBER := INPUT_ID;
INV_NAME VARCHAR(255);
PRICE NUMBER;
NOSTOCK EXCEPTION;

BEGIN

SELECT	INVENTORY_NAME
INTO 	INV_NAME
FROM	INVENTORY
WHERE	STOCK_ID = INPUT_1;
	
SELECT	LIST_PRICE
INTO 	PRICE
FROM	INVENTORY
WHERE	STOCK_ID = INPUT_1;
	
DBMS_OUTPUT.PUT_LINE('Inventory Name - ' || INV_NAME );
DBMS_OUTPUT.PUT_LINE('Price of Inventory: ' || PRICE );

EXCEPTION
WHEN NO_DATA_FOUND THEN
		DBMS_OUTPUT.PUT_LINE('WARNING AN ERROR HAS OCCURED! NO INFO AS PRODUCT ID DOESNT EXIST!');
END;

/* Procedure 3 - This procedure allows the user to compare inventory! */

PROCEDURE COMPARE_INVENTORY (INPUT1 IN NUMBER, INPUT2 IN NUMBER)
AS

INPUT_1 NUMBER := INPUT1;
INPUT_2 NUMBER := INPUT2;
INV_NAME_1 NUMBER;
INV_NAME_2 NUMBER;
PRICE_COMPARISON NUMBER;

BEGIN

	SELECT	LIST_PRICE
	INTO 	INV_NAME_1
	FROM	INVENTORY
	WHERE	STOCK_ID = INPUT_1;

	SELECT	LIST_PRICE
	INTO 	INV_NAME_2
	FROM	INVENTORY
	WHERE	STOCK_ID = INPUT_2;
	
	SELECT	INV_NAME_2-INV_NAME_1
	INTO	PRICE_COMPARISON
	FROM	DUAL;

	DBMS_OUTPUT.PUT_LINE('Inventory Item 1 : ' || INV_NAME_1);
	DBMS_OUTPUT.PUT_LINE('Inventory Item 2: ' || INV_NAME_2);
	DBMS_OUTPUT.PUT_LINE('Price Comparison: ' || PRICE_COMPARISON);

EXCEPTION
WHEN NO_DATA_FOUND THEN
		DBMS_OUTPUT.PUT_LINE('WARNING ONE OR BOTH OF THESE ITEMS DOES NOT EXIST IN THE DATABASE!');
END;

/* Procedure 4 - This procedure allows the user to see employee details! */
PROCEDURE SHOW_EMPLOYEE_DETAILS (INPUT1 IN NUMBER)
AS

INPUT_1 NUMBER := INPUT1;
FIRST_NAME VARCHAR(50);
LAST_NAME VARCHAR(50);
MANAGER_EMPLOYEE_ID NUMBER;
DATE_HIRED VARCHAR(150);
JOB_TITLE VARCHAR(100);
NO_EMPLOYEE EXCEPTION;

BEGIN

	SELECT	EMP_FIRST_NAME
	INTO 	FIRST_NAME
	FROM	EMPLOYEES
	WHERE	EMPLOYEE_ID = INPUT_1;

	SELECT	EMP_FIRST_NAME
	INTO 	LAST_NAME
	FROM	EMPLOYEES
	WHERE	EMPLOYEE_ID = INPUT_1;

	SELECT	MANAGER_EMP_ID
	INTO 	MANAGER_EMPLOYEE_ID 
	FROM	EMPLOYEES
	WHERE	EMPLOYEE_ID = INPUT_1;

	SELECT  HIRE_DATE
	INTO 	DATE_HIRED
	FROM	EMPLOYEES
	WHERE	EMPLOYEE_ID = INPUT_1;

	SELECT ER.JOB_TITLE
	INTO   JOB_TITLE
	FROM   EMPLOYEE_ROLE ER
	JOIN   EMPLOYEES E
	ON	   E.EMPLOYEE_ROLE_ID = ER.EMPLOYEE_ROLE_ID
	WHERE  ER.EMPLOYEE_ROLE_ID = INPUT_1;

	DBMS_OUTPUT.PUT_LINE('Employee Role: ' || JOB_TITLE);
	DBMS_OUTPUT.PUT_LINE('First Name : ' || FIRST_NAME);
	DBMS_OUTPUT.PUT_LINE('Last Name: ' || LAST_NAME);
	DBMS_OUTPUT.PUT_LINE('Manager Employee ID: ' || MANAGER_EMPLOYEE_ID);
	DBMS_OUTPUT.PUT_LINE('Date Hired: ' || DATE_HIRED);
	DBMS_OUTPUT.PUT_LINE('Job Title: ' || JOB_TITLE);

EXCEPTION
WHEN NO_DATA_FOUND THEN
		DBMS_OUTPUT.PUT_LINE('WARNING THIS EMPLOYEE DOES NOT EXIST IN DATABASE!');
END;

/*
PROCEDURE EMPLOYEE_SALARY_RANGE
AS

DECLARE
-- Cursor accessing all employees by id and salary from employee roles table
   CURSOR EMPLOYEE_CURSOR IS SELECT EMPLOYEE_ROLE_ID, JOB_SALARY FROM EMPLOYEE_ROLE;
-- Creating the row type cursor
   EMPLOYEE_ROW EMPLOYEE_CURSOR%ROWTYPE;
-- Creating the salary limit exception
   SALARY_LIMIT EXCEPTION;
-- Marks the start of an executable block

BEGIN
-- Opening cursor
   OPEN EMPLOYEE_CURSOR;
   FETCH EMPLOYEE_CURSOR INTO EMPLOYEE_ROW;
 -- While employ cursor finds loop
   WHILE EMPLOYEE_CURSOR%FOUND LOOP
   -- If employee salary is less than 20,000 then
   IF EMPLOYEE_ROW.JOB_SALARY < 20000 THEN
   -- Raise application error
   RAISE_APPLICATION_ERROR(-20001, 'STOP: '|| EMPLOYEE_ROW.EMPLOYEE_ROLE_ID || ' Salary below 20000');
   END IF;
  -- If employee salary is over 90,000 then
   IF EMPLOYEE_ROW.JOB_SALARY > 90000 THEN 
  -- Raise salary limits
   RAISE SALARY_LIMIT;		
   END IF;
   -- Feteching the employee cursor into employee row
   FETCH EMPLOYEE_CURSOR INTO EMPLOYEE_ROW;
   -- Ending the loop
   END LOOP;
   -- Closing the employee cursor
   CLOSE EMPLOYEE_CURSOR;
   
   EXCEPTION
      WHEN SALARY_LIMIT THEN
-- If any employee has a salary greater than 90,000 output a message
         DBMS_OUTPUT.PUT_LINE('Employee ID: ' || EMPLOYEE_ROW.EMPLOYEE_ROLE_ID|| ' Salary exceeding 90000');
-- Re-raise the exception
   RAISE;
-- Marks the end of an executable block

END;
/ */

END PETSTORE_PACKAGE; 
/

----------------------------------------------------------------------------------------------------------------------------------------------
Q7. 2 PL / SQL FUNCTIONS
----------------------------------------------------------------------------------------------------------------------------------------------

/* PL / SQL FUNCTION 1 - This function suggests a pet to buy in the store based on their given budget  */

CREATE OR REPLACE FUNCTION PET_SUGGESTION (COST IN NUMBER )
RETURN VARCHAR2
IS
ITEM VARCHAR2(50);

/* Set Cursor Item*/
CURSOR ITEM1 IS
/* Select inventory name and where the list price is between 0 and +1500 */
SELECT INVENTORY_NAME
FROM INVENTORY
WHERE LIST_PRICE BETWEEN COST - 0 AND COST + 1500;

/* Start executing */
BEGIN
OPEN ITEM1;
FETCH ITEM1 INTO ITEM ;

/* If no pet in budget */
IF ITEM1%NOTFOUND THEN
DBMS_OUTPUT.PUT_LINE('NO PET WITHIN BUDGET RANGE');
   END IF;
   CLOSE ITEM1;

RETURN ITEM;

/*Error handling message */
EXCEPTION
WHEN OTHERS THEN
RAISE_APPLICATION_ERROR(-1001,'ERROR - '||SQLCODE||' -ERROR- '||SQLERRM);
END;
/

/*
-- This select statement will return a pet (dog): Premier White Poodle
SELECT PET_SUGGESTION  (2000) FROM DUAL;

-- This select statement will return a pet (dog): German Shepard
SELECT PET_SUGGESTION  (1000) FROM DUAL;

/*

/* PL / SQL FUNCTION 2 - This function gives the total order amount on a Order ID */

CREATE OR REPLACE FUNCTION TOTAL_ORDER_AMOUNT (input_id IN NUMBER)
RETURN NUMBER
IS
ID_TO_USE NUMBER := input_id;
STOCK_ID NUMBER;
TOTAL_ORDER_AMOUNT  NUMBER := 0;
NO_ORDER_EXISTS EXCEPTION;

BEGIN
/* select sum of order */
SELECT SUM(I.LIST_PRICE*OD.ORDER_QUANTITY)
INTO TOTAL_ORDER_AMOUNT 
FROM ORDER_DETAILS OD
JOIN INVENTORY I
ON OD.STOCK_ID = I.STOCK_ID
WHERE ORDER_ID = ID_TO_USE;

/*If there is no the price i.e raise order doesnt exist */
IF TOTAL_ORDER_AMOUNT IS NULL THEN
RAISE NO_ORDER_EXISTS;
END IF;
	
/* If there is an order value it will return the total order amount for all orders */
RETURN TOTAL_ORDER_AMOUNT ;

EXCEPTION
/* Error handling message for when the order doesn't exist */
WHEN NO_ORDER_EXISTS THEN
DBMS_OUTPUT.PUT_LINE('ERROR! ORDER DOES NOT EXIST! PLEASE CHECK ORDER NUMBER!');
END TOTAL_ORDER_AMOUNT ;
/

/* TEST - This will calculate the amount 569.92. The price of 7 tennis balls and a Grey tabby.
SELECT TOTAL_ORDER_AMOUNT  (701) FROM dual;
*/

----------------------------------------------------------------------------------------------------------------------------------------------
Q8. 3 Triggers (at least 1 before, and at least 1 after)
----------------------------------------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------------------
/* Trigger 1 (before) - This trigger will automatically calculate the Customer ID with value from a sequence.*/
--------------------------------------------------------------------------------------------------------------------------
--SET SERVEROUTPUT ON

-- Code to create a Sequence
CREATE SEQUENCE CUST_TRIGGER
START WITH 513 INCREMENT BY 1;

-- Code to create a trigger */
CREATE OR REPLACE TRIGGER CUST_TRIGGER
-- Trigger to active on customers for each row
BEFORE INSERT ON CUSTOMERS FOR EACH ROW
BEGIN
/* Select next value from sequence created above */
SELECT CUST_TRIGGER.NEXTVAL INTO :NEW.CUSTOMER_ID FROM DUAL;
END;
/

/* Demonstrate the trigger working */
BEGIN
/* Insert into Customer */ 
INSERT INTO CUSTOMERS (CUST_FIRST_NAME, CUST_LAST_NAME) VALUES('Bill', 'Murray');
COMMIT;
END;
/

--------------------------------------------------------------------------------------------------------------------------
/* Trigger 2 (Before) - This trigger will output messages when inserting, updating or deleting from the Customers table */
--------------------------------------------------------------------------------------------------------------------------

/* Create trigger */
CREATE OR REPLACE TRIGGER CUST_TRIGGER_OUTPUT
/* Trigger to act before */
BEFORE INSERT 
/* Columns the trigger affects */
OR UPDATE OF CUST_PHONE, CUST_EMAIL 
OR
DELETE
/* Table the trigger is activated on */
ON CUSTOMERS
BEGIN

/*Start case statement */
CASE
/* When inserting do... */
WHEN INSERTING THEN
/* Print out statement for insert */
DBMS_OUTPUT.PUT_LINE('NEW DATA HAS SUCCESSFULLY BEEN ENTERED INTO CUSTOMERS');
WHEN UPDATING('CUST_PHONE') THEN
/* Print out statement for update */
DBMS_OUTPUT.PUT_LINE('UPDATING CUSTOMER PHONE NUMBER COMPLETE');
/* When updating do.. */
WHEN UPDATING('CUST_EMAIL') THEN
/* Print out statement for update */
DBMS_OUTPUT.PUT_LINE('UPDATING CUSTOMER EMAIL COMPLETE');
/* When deleting do */
WHEN DELETING THEN
/* Print out statement for delete */
DBMS_OUTPUT.PUT_LINE('DATA HAS BEEN DELETED FROM CUSTOMERS');
/* End case statement */
END CASE;
END;
/

/* Demonstrate the trigger working */
BEGIN
/* Insert into Customer */ 
INSERT INTO CUSTOMERS (CUST_FIRST_NAME, CUST_LAST_NAME) VALUES('Vin', 'Diesel');
COMMIT;
END;
/

--------------------------------------------------------------------------------------------------------------------------
/* Trigger 3 (After) - This trigger is to look at the old price and new price of a product, 
						supply or pet changed in the inventory table. */
--------------------------------------------------------------------------------------------------------------------------

/* Creates the trigger */
CREATE OR REPLACE TRIGGER UPDATE_PRODUCT_PRICE
/* Specifies the table to insert trigger */
AFTER DELETE OR INSERT OR UPDATE ON INVENTORY
FOR EACH ROW
/* When new list price is greater than 0 this trigger will happen */
WHEN (NEW.LIST_PRICE > 0)
DECLARE
/* Intilising price difference */
PRICE_DIFFERENCE NUMBER;
BEGIN
/* Calculating price difference */
PRICE_DIFFERENCE := :NEW.LIST_PRICE  - :OLD.LIST_PRICE;
/* Print statement original price */
DBMS_OUTPUT.PUT_LINE('ORIGINAL PRICE: ' || :OLD.LIST_PRICE);
/* Print statement updated price */
DBMS_OUTPUT.PUT_LINE('UPDATED PRICE: ' || :NEW.LIST_PRICE);
/* Print statement price difference */
DBMS_OUTPUT.PUT_LINE('PRICE_DIFFERENCE: ' || PRICE_DIFFERENCE);
END;
/

--------------------------------------------------------------------------------------------------------------------------
How to make a Dumpfile
--------------------------------------------------------------------------------------------------------------------------
user@guestOS:~$ expdp USERNAME SCHEMAS=petstore_database DUMPFILE=pestore_database